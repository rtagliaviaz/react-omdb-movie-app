{"version":3,"sources":["types/favoriteMoviesTypes.js","actions/favoriteMoviesActions.js","components/General/Spinner.js","components/Home.js","components/Movie.js","App.js","reducers/favoriteMoviesReducer.js","reducers/index.js","index.js"],"names":["LOADING","ERROR","GET_FAVORITE_MOVIES","GET_LAST_SEARCH","GET_LAST_MOVIE_LIST","addToFavorites","movie","dispatch","getState","newMovie","favoriteMoviesReducer","favoriteMovies","push","type","payload","removeFromFavorites","movieId","newMovieList","remove","lastMovieList","favoriteMoviePosition","map","x","imdbID","indexOf","splice","moviePosition","favorite","getLastMovieList","list","Spinner","className","Home","useSelector","store","lastSearch","loader","error","useDispatch","useState","loading","setLoading","setList","setMovie","searchError","setSearchError","useEffect","length","forEach","favMovie","includes","getInfo","a","axios","get","res","lista","data","Search","li","i","Title","Poster","Year","favoriteMoviesActions","src","alt","placeholder","onChange","e","target","value","onKeyPress","key","index","onClick","preventDefault","updatedList","test","to","pathname","state","api","apiKey","Movie","props","history","useHistory","details","setDetails","added","setAdded","undefined","location","movieID","then","match","url","slice","goBack","Runtime","Rated","Ratings","Value","Plot","Actors","split","actor","Genre","genre","Director","director","App","exact","path","component","INITIAL_STATE","combineReducers","action","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2f5bb001.chunk.js","sourcesContent":["export const LOADING = 'loading'\nexport const ERROR = 'error'\nexport const GET_FAVORITE_MOVIES = 'get_favorite_movies'\nexport const GET_LAST_SEARCH = \"get_last_search\"\nexport const GET_LAST_MOVIE_LIST = \"get_last_movie_list\"","import { \n  ERROR, \n  LOADING, \n  GET_FAVORITE_MOVIES,\n  GET_LAST_SEARCH,\n  GET_LAST_MOVIE_LIST\n} from '../types/favoriteMoviesTypes'\n\nexport const addToFavorites = (movie) => (dispatch, getState) => {\n  const {favoriteMovies} = getState().favoriteMoviesReducer;\n\n  const newMovie = favoriteMovies\n  \n  newMovie.push(movie)\n  // console.log(favoriteMovies)\n  dispatch({\n    type: GET_FAVORITE_MOVIES,\n    payload: newMovie\n  })\n}\n\nexport const removeFromFavorites = (movieId) => (dispatch, getState) => {\n  const {favoriteMovies, lastMovieList} = getState().favoriteMoviesReducer;\n\n  \n  const newMovieList = favoriteMovies;\n  const remove = lastMovieList\n\n  let favoriteMoviePosition = newMovieList.map(x => {return x.imdbID}).indexOf(movieId)\n    if(favoriteMoviePosition > -1){\n      newMovieList.splice(favoriteMoviePosition, 1)\n    }\n\n   \n  let moviePosition = remove.map(x => {return x.imdbID}).indexOf(movieId)\n    if(moviePosition > -1){\n      remove[moviePosition].favorite = false\n    }\n    // console.log(remove)\n\n  \n  \n      \n  dispatch({\n    type: GET_FAVORITE_MOVIES,\n    payload: newMovieList\n  })\n} \n\n//add to another reducers\n\n//save last search\nexport const getLastSearch = (movie) => (dispatch) => {\n  dispatch({\n    type: GET_LAST_SEARCH,\n    payload: movie\n  })\n}\n\nexport const getLastMovieList = (list) => (dispatch) => {\n\n  dispatch({\n    type: GET_LAST_MOVIE_LIST,\n    payload: list\n  })\n}","import React from 'react'\nimport './Spinner.css'\n\nconst Spinner = () => {\n  return (\n    <div className=\"centerSpinner\">\n      <div className=\"lds-ripple\"><div></div><div></div></div>\n    </div>\n  )\n}\n\nexport default Spinner\n","import React, {useState, useEffect} from 'react'\nimport {Link} from 'react-router-dom'\n//actions\nimport * as favoriteMoviesActions from '../actions/favoriteMoviesActions'\nimport {useSelector, useDispatch} from 'react-redux'\nimport axios from 'axios'\n\nimport Spinner from './General/Spinner'\n//api\nconst api = 'http://www.omdbapi.com/?'\n//api key\nconst apiKey = 'apikey=18eaeb4f'\n\nconst Home = () => {\n  //useSelector and useDispatch\n  const {favoriteMovies, lastSearch, lastMovieList, loader, error} = useSelector(store => store.favoriteMoviesReducer)\n  const dispatch = useDispatch()\n\n  const [loading, setLoading] = useState(false)\n  const [list, setList] = useState([])\n  const [movie, setMovie] = useState('')\n  const [searchError, setSearchError] = useState(false)\n\n  // console.log(searchError)\n  useEffect(() => {\n\n    if (lastSearch !== '' && lastMovieList.length > 0) {\n      setMovie(lastSearch)\n      //if the movie is in the favorite list it will mark the movie as favorite\n      lastMovieList.forEach(movie => {\n        favoriteMovies.forEach(favMovie => {\n          if (movie.imdbID.includes(favMovie.imdbID)) {\n            movie.favorite = true\n          }\n        })\n      })\n      setList(lastMovieList)\n    }\n    \n  }, [])\n\n  //get response from API\n  const getInfo = async () => {\n    setLoading(true)\n    try {\n    // console.log(movie)\n    const res = await axios.get(`${api}${apiKey}&s=${movie}&type=movie&page=1`)\n      \n        if (res) {\n          const lista = []\n          res.data.Search.map((li, i) => (\n            lista[i] = {\n              ...lista[i],\n              favorite: false,\n              imdbID: li.imdbID,\n              Title: li.Title,\n              Poster: li.Poster,\n              Year: li.Year\n            }\n          ))\n\n        //if the movie is in the favorite list it will mark the movie as favorite\n        lista.forEach(movie => {\n          favoriteMovies.forEach(favMovie => {\n            if (movie.imdbID.includes(favMovie.imdbID)) {\n              movie.favorite = true\n            }\n          })\n        })\n        // console.log('lista', lista)\n        dispatch(favoriteMoviesActions.getLastMovieList(lista))\n        setList(lista)\n        setSearchError(false)\n        setLoading(false)\n        // console.log('list', list)\n      }\n  \n    } catch (error) {\n      // console.log(error)\n        setLoading(false)\n        setSearchError(true)\n    }\n    // .catch(err => {\n      \n    // })\n    \n  }\n\n  //empty state\n  const noMovies = () => {\n    if (searchError) {\n      return(\n        <div>\n          <div className=\"homeLogo\">\n            <img src=\"assets/Logo.png\" alt=\"\"/>\n          </div>\n          <div className=\"homeMsg\">\n            <p className=\"primary\">Cannot find movies with that name, please search for another</p>\n            {/* <p className=\"secondary\">Here's an offer you can't refuse</p> */}\n          </div>\n        </div>\n      )\n    }\n    return(\n      <div>\n        <div className=\"homeLogo\">\n          <img src=\"assets/Logo.png\" alt=\"\"/>\n        </div>\n        <div className=\"homeMsg\">\n          <p className=\"primary\">Don't Know what to search?</p>\n          <p className=\"secondary\">Here's an offer you can't refuse</p>\n        </div>\n        \n      </div>\n    )\n  }\n  \n  const test = (e, imdbID, Title, Year, Poster, favorite, index) => {\n    e.preventDefault()\n    // console.log(index)\n    const updatedList = [\n      ...list\n    ]\n\n    // console.log('updated', updatedList)\n\n    updatedList[index] = {\n      ...list[index],\n      favorite: !favorite\n    }\n\n    setList(updatedList)\n\n    const newFavorite = {\n      Poster,\n      Title,\n      Year,\n      favorite: true,\n      imdbID\n    }\n    \n    //if is already favorite then remove it from favorite list\n    if (favorite === true) {\n      dispatch(favoriteMoviesActions.removeFromFavorites(imdbID))\n      // let favoriteMoviePosition = favoriteMovies.map(x => {return x.imdbID}).indexOf(imdbID)\n      // // console.log(favoriteMoviePosition)\n      // if(favoriteMoviePosition > -1){\n      //   favoriteMovies.splice(favoriteMoviePosition, 1)\n      // }\n      return\n    } \n    dispatch(favoriteMoviesActions.addToFavorites(newFavorite))\n    // add movie to favorite movies list\n    // setFavoriteMovies(favoriteMovies=>[...favoriteMovies, newFavorite])\n  }\n\n  // console.log(movie)\n\n  const movieList = () => {\n    if (loading) {\n      return(\n        <Spinner></Spinner>\n      )\n    }\n    if (searchError) {\n      return(\n        <div>\n          <div className=\"homeLogo\">\n            <img src=\"assets/Logo.png\" alt=\"\"/>\n          </div>\n          <div className=\"homeMsg\">\n            <p className=\"primary\">Cannot find movies with that name, please search for another</p>\n            {/* <p className=\"secondary\">Here's an offer you can't refuse</p> */}\n          </div>\n        </div>\n      )\n    }\n    if (list.length > 0) {\n      return(\n        <div className=\"movies\">\n          \n            {list.map((li, index) => (<div className=\"movie\" key={li.imdbID}>\n              \n                  <div className=\"favorite\" onClick={e => test(e, li.imdbID, li.Title, li.Year, li.Poster, li.favorite, index)}>\n                    {li.favorite ? <img src=\"assets/icons/icon-heart-full.png\" alt=\"\" className=\"icon\"/> : <img src=\"assets/icons/icon-heart-white.png\" alt=\"\" className=\"icon\" />}\n                  </div>\n                  \n                  <Link\n                  className=\"invisibleButton\"\n                  to={{\n                    // pathname: \"/details/\",\n                    pathname: `/details/${li.imdbID}`,\n                    state:{'movieID': li.imdbID, 'lastSearch': movie}\n                  }}\n                  />\n          \n                  \n                  <p className=\"movieTitle\" >{li.Title}</p>\n                  <p className=\"movieYear\">{li.Year}</p>\n                \n                <img src={li.Poster} alt=\"\" className=\"moviePoster\" />\n              \n              \n            </div>))}\n        <div className=\"empty-space\"></div>\n        <div className=\"empty-space\"></div>\n        <div className=\"empty-space\"></div>\n\n      </div>\n      \n      )\n    }\n    \n  }\n\n\n  return (\n    <div >\n      <div className=\"searchBar\">\n        <img src=\"\" alt=\"\"/>\n        <input \n          type=\"text\" \n          placeholder=\"Search movies...\"\n          onChange={e => setMovie(e.target.value)}\n          onKeyPress={e => {\n            if (e.key === 'Enter') {\n              getInfo()\n              setSearchError(false)\n              dispatch(favoriteMoviesActions.getLastSearch(movie))\n            }\n          }}\n          />\n      </div>\n      <div className=\"content\">\n        {list.length >0 ? movieList() : noMovies()}\n      </div>\n    </div>\n  )\n}\n\n\nexport default Home\n","import React, {useState, useEffect} from 'react'\nimport {useHistory} from 'react-router-dom'\nimport './Movie.css'\nimport axios from 'axios'\n\n//general\nimport Spinner from './General/Spinner'\n//actions\nimport * as favoriteMoviesActions from '../actions/favoriteMoviesActions'\nimport {useSelector, useDispatch} from 'react-redux'\n//api\nconst api = 'http://www.omdbapi.com/?'\n//api key\nconst apiKey = 'apikey=18eaeb4f'\n\nconst Movie = (props) => {\n  let history = useHistory();\n  //useSelector and useDispatch\n  const {favoriteMovies, loader, error} = useSelector(store => store.favoriteMoviesReducer)\n  const dispatch = useDispatch()\n\n  // console.log((props.match.url).slice(9, 18)) // movie id\n\n  const [details, setDetails] = useState()\n  const [added, setAdded] = useState(false)\n  //get movie details\n  useEffect(() => {\n    if (props.location.state !== undefined) {\n      axios.get(api+apiKey+`&i=${props.location.state.movieID}`)\n      .then(res => {\n        if (res) {\n          setDetails(res.data)\n        } \n      })\n    } else {\n      axios.get(api+apiKey+`&i=${(props.match.url).slice(9, 18)}`)\n      .then(res => {\n        if (res) {\n          setDetails(res.data)\n        } else {\n          // console.log('error')\n        }\n      })\n    }\n  }, [])\n\nuseEffect(() => {\n  if (details && favoriteMovies.map(x => {return x.imdbID}).includes(details.imdbID)) {\n    setAdded(true)\n  }\n}, [details])\n  \n  const removeFromFavorites = (e, movieId) => {\n    e.preventDefault()\n    if (added) {\n      setAdded(!added)\n      dispatch(favoriteMoviesActions.removeFromFavorites(movieId))\n      return\n    }\n  }\n  // console.log(details)\n  const addtoFavorites = (e, Poster, Title, Year, imdbID) => {\n    const movie = {\n      Poster,\n      Title,\n      Year,\n      favorite: true,\n      imdbID\n    }\n    dispatch(favoriteMoviesActions.addToFavorites(movie))\n    // console.log('added')\n    setAdded(!added)\n  }\n\n  // const goBack = (e) => {\n  //   e.preventDefault()\n  //   history.push({pathname:'/', state:{'movie':searched}})\n  // }\n  // const cast = details.Actors.split(\", \")\n  // console.log('cast', cast.map(actor => (actor)))\n  return (\n    \n    <div>\n      {details === undefined ? <Spinner /> : <div>\n        <div\n          className=\"btn__return\"\n          onClick={() => history.goBack()}\n          // to={{\n          //   pathname: \"/\",\n          // }}\n          >\n          <img src=\"assets/icons/icon-arrow-grey.png\" alt=\"\" />\n        </div>\n      <div className=\"movie-info\">\n        <div className=\"info\">\n          <div className=\"info__title-year-rate\">\n            <p>{details.Runtime} · {details.Year} · <b className=\"info__title-year-rate__rate\">{details.Rated}</b></p>\n          </div>\n          <div className=\"info__title-year-rate__title\">\n            <p>{details.Title}</p>\n          </div>\n          \n          <div className=\"labels\">\n            <div className=\"labels__imdb\">\n              <div className=\"logo\">\n              <img src=\"assets/logos/logo-imdb.png\" alt=\"\"/>\n              </div>\n              <div className=\"rating\">\n                <p>{details.Ratings[0].Value}</p>\n              </div>\n            </div>\n            {details.Ratings.length > 1 ? \n            <div className=\"labels__rottenTomatoes\">\n             \n                <div className=\"logo\">\n                  <img src=\"assets/logos/logo-rotten-tomatoes.png\" alt=\"\"/>\n                </div>\n              \n              <div className=\"rating\">\n                <p>{details.Ratings[1].Value}</p>\n              </div> \n              \n            </div>\n            : null}\n            \n              {!added ? \n              <div className=\"labels__favorite\" onClick={e =>addtoFavorites(e, details.Poster, details.Title, details.Year, details.imdbID)}>\n                <div className=\"icon\">\n                <img src=\"assets/icons/icon-heart-grey.png\" alt=\"\"/>\n                </div>\n                <div className=\"text\">\n                <p>Add to favourites</p>\n                </div>\n              </div> :\n              <div className=\"labels__favorite favAdded\" onClick={e =>removeFromFavorites(e, details.imdbID)}>\n              <div className=\"icon\">\n              <img src=\"assets/icons/icon-heart-full.png\" alt=\"\"/>\n              </div>\n              <div className=\"text added\">\n              <p>Added</p>\n              </div>\n              </div> }\n            \n          </div>\n          \n          <div className=\"plot-segment\">\n            <p className=\"segment-title\">Plot</p>\n            <p className=\"segment-info\">{details.Plot}</p>\n          </div>\n          <div className=\"cast-genre-director\">\n            <div className=\"cast-segment\">\n              <p className=\"segment-title\">Cast</p>\n              {/* <p >{details.Actors.split(\", \")}</p> */}\n              {details.Actors.split(\", \").map(actor => (\n                <p className=\"segment-info\" key={actor}>{actor}</p>\n              ))}\n            </div>\n            <div className=\"genre-segment\">\n              <p className=\"segment-title\">Genre</p>\n              {details.Genre.split(\", \").map(genre => (\n               <p className=\"segment-info\" key={genre}>{genre}</p>\n              ))}\n            </div>\n            <div className=\"director-segment\">\n              <p className=\"segment-title\">Director</p>\n              {/* <p className=\"segmentInfo\">{details.Director}</p> */}\n              {details.Director.split(\", \").map(director => (\n               <p className=\"segment-info\" key={director}>{director}</p>\n              ))}\n            </div>\n          </div>\n        </div>\n        <div className=\"poster\">\n          <img src={details.Poster} alt=\"\"/>\n        </div>\n      </div>\n        </div>}\n      \n    </div>\n  )\n}\nexport default Movie\n","// import {Link,BrowserRouter, Route, Switch } from 'react-router-dom'\nimport { HashRouter, Route } from 'react-router-dom'\n//components\nimport Home from './components/Home'\nimport Movie from './components/Movie'\n// import FavoriteMovies from './components/FavoriteMovies'\n\nconst App = () => {\n  return (\n      <div className=\"App\">\n        {/* <BrowserRouter> */}\n        <HashRouter >\n          {/* <Switch> */}\n          <>\n            <Route exact path='/' component={Home}/>\n            <Route exact path='/details/:imdbId' component={Movie}/>\n          </>\n          {/* </Switch> */}\n        </HashRouter>\n        {/* </BrowserRouter> */}\n      </div>\n  );\n}\n\nexport default App;\n","import {\n  LOADING,\n  ERROR,\n  GET_FAVORITE_MOVIES,\n  GET_LAST_SEARCH,\n  GET_LAST_MOVIE_LIST\n} from '../types/favoriteMoviesTypes'\n\nconst INITIAL_STATE = {\nloader: false,\nerror: '',\nfavoriteMovies: [],\nlastSearch: '',\nlastMovieList: []\n}\n\nexport default (state = INITIAL_STATE, action) => {\n\n  switch(action.type) {\n\n    case GET_LAST_MOVIE_LIST:\n      return{\n        ...state,\n        lastMovieList: action.payload\n      }\n\n    case GET_LAST_SEARCH:\n      return{\n        ...state,\n        lastSearch: action.payload\n      }\n\n    case GET_FAVORITE_MOVIES:\n      return {\n        ...state,\n        favoriteMovies: action.payload,\n        loader: false,\n        error: ''\n      }\n\n    case LOADING:\n      return {\n        ...state,\n        loader: true\n      }\n\n    case ERROR:\n      return {\n        ...state,\n        loader: false,\n        error: action.payload\n      }\n    \n    default: return state\n  }\n  \n}","import {combineReducers} from 'redux'\n\n//reducers\nimport favoriteMoviesReducer from './favoriteMoviesReducer'\n\nexport default combineReducers ({\n  favoriteMoviesReducer\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n//redux\nimport {createStore, applyMiddleware} from 'redux'\nimport {Provider} from 'react-redux'\nimport reduxThunk from 'redux-thunk'\nimport reducers from './reducers'\n\nconst store = createStore(\n  reducers,\n  {},\n  applyMiddleware(reduxThunk)\n)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}